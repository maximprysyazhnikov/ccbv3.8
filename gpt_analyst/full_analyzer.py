# gpt_analyst/full_analyzer.py
from __future__ import annotations

import re
from typing import Optional, Tuple

from core_config import CFG
from router.analyzer_router import pick_route

# OpenRouter –∫–ª—ñ—î–Ω—Ç (—Ä–µ–∞–ª—å–Ω–∏–π –∞–±–æ –∑–∞–ø–∞—Å–Ω–∏–π)
try:
    from utils.openrouter import chat_completion
except Exception:  # pragma: no cover
    from utils.openrouter_client import chat_completion  # type: ignore


def _make_ta_block(symbol: str, timeframe: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î Markdown-–±–ª–æ–∫ –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
    –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ utils.ta_formatter.format_ta_report.
    """
    # 1) –∫—Ä–∞—Å–∏–≤–∏–π Markdown-–ø—Ä–µ—Å–µ—Ç
    try:
        from utils.ta_formatter import format_ta_report

        md = format_ta_report(symbol, timeframe, CFG.get("analyze_limit", 150))
        return md if isinstance(md, str) and md.strip() else "_No indicators_"
    except Exception:
        pass

    # 2) fallback: —Å–ø—Ä–æ—â–µ–Ω–∏–π –Ω–∞–±—ñ—Ä
    try:
        from gpt_analyst.ta_engine import get_ta_indicators  # optional

        data = get_ta_indicators(
            symbol=symbol, timeframe=timeframe, limit=CFG.get("analyze_limit", 150)
        )
        lines = [f"*{symbol}* (TF={timeframe}) ‚Äî Indicators", ""]
        for k, v in data.items():
            try:
                lines.append(f"- {k}: `{float(v):.4f}`")
            except Exception:
                lines.append(f"- {k}: `{v}`")
        return "\n".join(lines)
    except Exception:
        return f"*{symbol}* (TF={timeframe}) ‚Äî _indicators unavailable_"


_PLAN_RX = {
    "direction": re.compile(r"\b(LONG|SHORT)\b", re.I),
    "entry": re.compile(r"\bENTRY\s*[:=]\s*([0-9]+(?:\.[0-9]+)?)", re.I),
    "sl": re.compile(r"\bS(?:TOP(?:-|\s*)LOSS|L)\s*[:=]\s*([0-9]+(?:\.[0-9]+)?)", re.I),
    "tp": re.compile(r"\bT(?:AKE(?:-|\s*)PROFIT|P)\s*[:=]\s*([0-9]+(?:\.[0-9]+)?)", re.I),
    "rr": re.compile(r"\bRR\s*[:=]\s*([0-9]+(?:\.[0-9]+)?)", re.I),
}


def _calc_rr_block(symbol: str, tf: str, *, entry=None, sl=None, tp=None) -> str:
    """
    Backward-compatible shim.
    –Ø–∫—â–æ —Ä–µ–∞–ª—å–Ω–∞ RR-–ª–æ–≥—ñ–∫–∞ –±—É–¥–µ –≤ —ñ–Ω—à–æ–º—É –º–æ–¥—É–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, analyzer_core —á–∏ services.autopost),
    –º–æ–∂–Ω–∞ –ø—Ä–æ–∫–∏–Ω—É—Ç–∏ —Å—é–¥–∏ —ñ–º–ø–æ—Ä—Ç —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –±–ª–æ–∫.
    –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –±–ª–æ–∫, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ /ai.
    """
    try:
        # –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à ‚Äî –ø—ñ–¥–∫–ª—é—á–∏ —Ä–µ–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:
        # from services.autopost import compute_rr_metrics
        # if entry is not None and sl is not None:
        #     m = compute_rr_metrics(float(entry), float(sl), float(tp) if tp is not None else None)
        #     rr = m.get("rr_target")
        #     if rr is not None:
        #         return f"üéØ RR(target): {rr:.2f}"
        return ""  # —Ç–∏–º—á–∞—Å–æ–≤–æ –±–µ–∑ RR, –∞–ª–µ –±–µ–∑ –∫—Ä–µ—à–∞
    except Exception:
        return ""


def _parse_fields(text: str) -> dict:
    t = (text or "").replace("\u00a0", " ")
    out = {"direction": "-", "entry": "-", "sl": "-", "tp": "-", "rr": "-"}
    # direction: —è–∫—â–æ —î —ñ LONG —ñ SHORT ‚Äî –∑–∞–ª–∏—à–∏–º–æ ¬´-¬ª
    ds = {m.group(1).upper() for m in re.finditer(_PLAN_RX["direction"], t)}
    if len(ds) == 1:
        out["direction"] = next(iter(ds))
    for k in ("entry", "sl", "tp", "rr"):
        m = _PLAN_RX[k].search(t)
        if m:
            out[k] = f"{float(m.group(1)):.4f}"
    return out


def _normalize_locale(loc: str) -> str:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î 'uk'/'ua'/'en' —É –¥–≤–æ–ª—ñ—Ç–µ—Ä–Ω–∏–π –∫–æ–¥ –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏ LLM.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —É system-prompt.
    """
    if not loc:
        return "UK"
    u = loc.strip().lower()
    if u in ("uk", "ua", "uk-UA".lower()):
        return "UK"
    return "EN"


def run_full_analysis(
    symbol: str,
    tf: str,
    route: Optional[str] = None,  # –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ API
    locale: str = "uk",
    **_: object,
) -> Tuple[str, str]:
    """
    –ì–µ–Ω–µ—Ä—É—î –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω + –æ–∫—Ä–µ–º–æ Markdown –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.
    –ü–æ–≤–µ—Ä—Ç–∞—î (plan_text_plain, indicators_markdown).
    """
    loc_cfg = CFG.get("default_locale", "uk")
    loc_norm = _normalize_locale(locale or loc_cfg)

    indicators_md = _make_ta_block(symbol, tf)
    rr_block = _calc_rr_block(symbol, tf)

    system = f"You are a concise crypto trading assistant. Respond in {loc_norm}."
    user = (
        f"Symbol: {symbol}\n"
        f"Timeframe: {tf}\n\n"
        "Based on the technical indicators (see below), decide if a trade is present now.\n"
        "Return a *short* plan containing the fields on their own lines:\n"
        "Direction: LONG|SHORT\n"
        "Entry: <number>\n"
        "SL: <number>\n"
        "TP: <number>\n"
        "RR: <number>\n"
        "One or two sentences of rationale are OK after that.\n\n"
        "Indicators:\n"
        f"{indicators_md}\n"
    )
    if rr_block:
        user += f"\nRR helper:\n{rr_block}\n"

    # –í–∏–±—ñ—Ä –º–∞—Ä—à—Ä—É—Ç—É LLM: –±–µ–∑ undefined –∑–º—ñ–Ω–Ω–∏—Ö —ñ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ route
    chosen_route = pick_route(symbol)

    resp = chat_completion(
        endpoint=(
            chosen_route.base
            if chosen_route and getattr(chosen_route, "base", None)
            else CFG.get("or_base")
        ),
        api_key=(chosen_route.api_key if chosen_route else None),
        model=(chosen_route.model if chosen_route else None),
        messages=[{"role": "system", "content": system}, {"role": "user", "content": user}],
        timeout=(chosen_route.timeout if chosen_route else CFG.get("or_timeout", 30)),
    ) or ""

    # –≤–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —á–∏—Å–ª–∞, —â–æ–± –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –±—É–ª–∏ —É –ø–ª–∞–Ω—ñ
    parsed = _parse_fields(resp)
    header = (
        f"{symbol} [{tf}] ‚Üí {parsed['direction']}\n"
        f"Entry: {parsed['entry']} | SL: {parsed['sl']} | TP: {parsed['tp']}\n"
        f"RR: {parsed['rr']}\n"
    )

    # –ø–ª–∞–Ω –±–µ–∑ Markdown, —â–æ–± –±–µ–∑–ø–µ—á–Ω—ñ—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏
    body = resp.strip()
    plan_plain = header + (("\n" + body) if body else "")
    return plan_plain, indicators_md
